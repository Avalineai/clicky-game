{"version":3,"sources":["components/imagecard.js","App.js","serviceWorker.js","index.js"],"names":["styles","imgSize","width","height","contStyles","container","display","alignItems","justifyContent","margin","view","viewCont","float","ImageCard","props","console","log","image","react_default","a","createElement","style","className","onClick","handleClick","id","alt","name","src","App","state","imageArr","randomShuffle","_this","setState","_ref","sort","Math","random","score","highScore","clicked","filter","thisImage","click","forEach","imageBool","_this2","this","Fragment","map","imagecard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6/BAEMA,SAAS,CACXC,QAAS,CACLC,MAAO,QACPC,OAAQ,WAIVC,EAAa,CACfC,UAAW,CACPH,MAAO,QACPC,OAAQ,QACRG,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,SAIVC,EAAO,CACTC,SAAU,CACNC,MAAO,SAgBAC,MAZf,SAAmBC,GAEf,OADAC,QAAQC,IAAIF,EAAMG,MAAMA,OAEpBC,EAAAC,EAAAC,cAAA,OAAKC,MAAOX,EAAKC,UACjBO,EAAAC,EAAAC,cAAA,OAAKC,MAAOjB,EAAWC,UAAWiB,UAAU,QACxCJ,EAAAC,EAAAC,cAAA,OAAKC,MAAOrB,EAAOC,QAASqB,UAAU,iBAClCJ,EAAAC,EAAAC,cAAA,OAAKG,QAAS,kBAAMT,EAAMU,YAAYV,EAAMG,MAAMQ,KAAKJ,MAAOrB,EAAOC,QAASyB,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMG,MAAMA,mBC2BjHY,6MApDbC,MAAQ,CACNC,WACAC,cAAe,WACbC,EAAKC,SAAS,SAAAC,GAAA,MAAmB,CAC/BJ,SADYI,EAAGJ,SACIK,KAAK,WACtB,MAAO,GAAMC,KAAKC,eAIxBC,MAAO,EACPC,UAAW,KAGfhB,YAAc,SAAAC,GACZ,IAAIgB,EAAUR,EAAKH,MAAMC,SAASW,OAAO,SAAAC,GAAS,OAAIA,EAAUlB,KAAOA,IAClEgB,EAAQ,GAAGG,OAKdX,EAAKH,MAAMC,SAASc,QAAQ,SAAAC,GACtBA,EAAUF,QACZE,EAAUF,OAAQ,KAGxBX,EAAKC,SAAS,CAAEK,MAAO,MATrBE,EAAQ,GAAGG,OAAQ,EACnBX,EAAKC,SAAS,CAAEK,MAAON,EAAKH,MAAMS,MAAO,IACzCN,EAAKH,MAAME,0FAaJ,IAAAe,EAAAC,KAET,OADAjC,QAAQC,IAAIe,GAEVb,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8B,SAAA,KACE/B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACfJ,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,wBAAiB4B,KAAKlB,MAAMS,QAE7BS,KAAKlB,MAAMC,SAASmB,IAAI,SAAAjC,GAAK,OAC5BC,EAAAC,EAAAC,cAAC+B,EAAD,CACA3B,YAAgBuB,EAAKvB,YACrB4B,IAAOnC,EAAMQ,GACbR,MAASA,cA5CGoC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2d3d14cb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst styles = {\n    imgSize: {\n        width: \"300px\",\n        height: \"200px\",\n    }\n}\n\nconst contStyles = {\n    container: {\n        width: \"320px\",\n        height: \"220px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        margin: \"10px\"\n    }\n}\n\nconst view = {\n    viewCont: {\n        float: \"left\"\n    }\n}\n\nfunction ImageCard(props) {\n    console.log(props.image.image);\n    return (\n        <div style={view.viewCont}>\n        <div style={contStyles.container} className=\"card\">\n            <div style={styles.imgSize} className=\"img-container\">\n                <img onClick={() => props.handleClick(props.image.id)} style={styles.imgSize} alt={props.name} src={props.image.image} />\n            </div>\n        </div>\n        </div>\n    )\n}\nexport default ImageCard","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport ImageCard from \"./components/imagecard\";\nimport imageArr from \"./datafile.json\";\n\nclass App extends React.Component {\n  state = {\n    imageArr,\n    randomShuffle: () => {\n      this.setState(({ imageArr }) => ({\n        imageArr: imageArr.sort(function() {\n          return 0.5 - Math.random();\n        })\n      }));\n    },\n    score: 0,\n    highScore: 0,\n  }\n\nhandleClick = id => {\n  let clicked = this.state.imageArr.filter(thisImage => thisImage.id === id);\n  if (!clicked[0].click) {\n    clicked[0].click = true;\n    this.setState({ score: this.state.score +1 })\n    this.state.randomShuffle();\n  } else {\n    this.state.imageArr.forEach(imageBool => {\n      if (imageBool.click) {\n        imageBool.click = false;\n      }\n    })\n  this.setState({ score: 0 })\n  }\n  \n}\n\n\n  render() {\n  console.log(imageArr)\n  return (\n    <>\n      <div className=\"title-cont\">\n      <h1>Click Me Meow</h1>\n      <p>Your Score: { this.state.score }</p>\n      </div>\n    {this.state.imageArr.map(image => (\n      <ImageCard\n      handleClick = { this.handleClick }\n      key = {image.id}\n      image = {image}\n      />\n    ))\n    }\n    </>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}